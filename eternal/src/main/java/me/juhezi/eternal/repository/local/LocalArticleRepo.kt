package me.juhezi.eternal.repository.local

import io.realm.Sort
import me.juhezi.eternal.global.Fail
import me.juhezi.eternal.global.Success
import me.juhezi.eternal.global.globalRealm
import me.juhezi.eternal.model.Article
import me.juhezi.eternal.repository.interfaces.IArticleRepo

/**
 * Auto generated by repo_generator.py
 */
class LocalArticleRepo : IArticleRepo {
    override fun add(t: Article, success: Success<Article>?, fail: Fail?) {
        globalRealm.executeTransactionAsync({
            it.copyToRealm(t)
        }, {
            success?.invoke(t)
        }, {
            fail?.invoke("Add error", it)
        })
    }

    override fun update(t: Article, success: Success<Article>?, fail: Fail?) {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun remove(id: String, success: Success<Article>?, fail: Fail?) {
        globalRealm.executeTransactionAsync({
            val temp = it.where(Article::class.java)
                    .equalTo("id", id)
                    .findFirst()
            if (temp == null) {
                fail?.invoke("Remove Error", Throwable("Can find artcle by id"))
            } else {
                val article = it.copyFromRealm(temp)
                temp.deleteFromRealm()
                success?.invoke(article)
            }
        }, { error ->
            fail?.invoke("Remove Error", error)
        })
    }

    override fun query(id: String, success: Success<Article>?, fail: Fail?) {
        globalRealm.executeTransactionAsync({
            val article = it.where(Article::class.java)
                    .equalTo("id", id)
                    .findFirst()
            success?.invoke(it.copyFromRealm(article)!!)
        }, { error ->
            fail?.invoke("Query Error", error)
        })

    }

    override fun queryAll(success: Success<List<Article>>?, fail: Fail?) {
        globalRealm.executeTransactionAsync({
            val results = it.where(Article::class.java)
                    .sort("createTime", Sort.DESCENDING)    //根据创建时间进行排名
                    .findAll()
            success?.invoke(it.copyFromRealm(results))
        }, { error ->
            fail?.invoke("Query error", error)
        })
    }

}
