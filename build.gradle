import groovy.json.JsonSlurper

ext {
    // Project
    mainApplicationId = "me.juhezi.eternal"
    globalVersionCode = versionCode
    globalVersionName = versionName

    // Framework
    androidCompileSdkVersion = 28
    androidBuildToolsVersion = '28.0.0'
    supportLibVersion = '27.1.1'
    minSdkVersion = 21
    targetSdkVersion = 27
    compileSdkVersion = 27
    // Test
    junitVersion = '4.12'
    espressoVersion = '3.0.2'
    runnerVersion = '1.0.2'
    // Official
    constraintLayoutVersion = '1.1.3'
    kotlinxCoroutinesVersion = '1.0.1'
    // Third-party
    gsonVersion = '2.8.5'   // Gson
    smartRefreshVersion = '1.0.4'   // SmartRefreshLayout
    lottieVersion = '2.6.0-beta19'     // Lottie
    // Module
    notepadEnable = false    // notepad 模块
    timeEnable = false    // time 模块
}

buildscript {
    ext.kotlin_version = '1.3.10'
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "io.realm:realm-gradle-plugin:5.4.0"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * 获取签名信息
 */
def internalGetSigningConfigs() {
    def dir = new File(".")
    def jsonPath = "${dir.getCanonicalPath()}/${signJsonPath}"
    def jsonFile = new File(jsonPath)
    if (!jsonFile.exists()) {
        return ['keyAlias'     : '',
                'keyPassword'  : '',
                'storePassword': '']
    } else {
        def json = jsonFile.text
        def parser = new JsonSlurper()
        return parser.parseText(json)
    }
}

task getSigningConfigs() {
    doLast {
        println internalGetSigningConfigs()
    }
}